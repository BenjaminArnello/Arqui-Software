# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'temp.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import socket
import re

sintomas = ["Dificultad respiratoria severa",
            "Coloracion azul en piel",
            "Frialdad generalizada",
            "Traumatismo severos multiples",
            "Quemaduras en todo el cuerpo",
            "Perdida de miembro u organo",
            "Hemorragia masiva",
            "Trabajo de parte expulsivo",
            "Abuso sexual",
            "Alteracion aguda de signos vitales",
            "Estado convulsivo",
            "Deficiencia respiratoria moderada",
            "Crisis hipertensiva",
            "Diabetes descompesada",
            "Dolor toracico",
            "Trauma severo",
            "Quemadura de tercer grado",
            "Riesgo de perdida de miembro u organo",
            "Fractura",
            "Hemorragia digestiva",
            "Sangrado vaginal en embarazadas",
            "Trabajo de parto",
            "Abuso sexual antiguo",
            "Agitacion psicomotora",
            "Ingestion de sustancias toxicas o envenenamiento",
            "Dolor agudo",
            "Fiebre mayor a 38.5",
            "Vertigo severo",
            "Dificultad respiratoria leve",
            "Vomito y diarrea con deshidratación",
            "Sintomas asociados o dialisis",
            "Dolor moderado de menos de 24 horas",
            "Trauma moderado",
            "Quemadura segundo o primer grado",
            "Sangrado moderado",
            "Reaccion alergica con brote generalizado",
            "Fiebre menor a 38.5",
            "Tos y congestion",
            "Faringitis",
            "Amigdalitis",
            "Vomito",
            "Diarrea sin deshidratacion",
            "Dolor leve",
            "Dolor moderado de mas de 24 horas",
            "Trauma leve",
            "Signos de infeccion local",
            "Ardor al orinar",
            "Enfermedad venerea aguda",
            "Ansiedad y depresion",
            "Colico menstrual",
            "Dolor de cabeza cronico",
            "Tos cronica",
            "Inapetencia",
            "Dolor abdominal cronico",
            "Dolor postraumatico leve",
            "Dermatitis",
            "Estres emocional",
            "Enfermedades cronicas",
            "Formulacion de medicamentos",
            "Lectura de examenes",
            "Diarrea cronica",
            "Estreñimiento"]

class CapitalizeComboBox(QtWidgets.QComboBox):
    def keyPressEvent(self, event):
        # Check if a key press event has occurred
        if event.key() != QtCore.Qt.Key.Key_Return:
            current_text = self.currentText()
            if not current_text:
                # Capitalize the first letter of the typed text
                current_text = event.text().capitalize()
            else:
                # Update the text to maintain capitalization
                current_text = current_text[:self.lineEdit().cursorPosition()] + event.text()
            self.lineEdit().setText(current_text)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(808, 574)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tabWidget1 = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget1.setAutoFillBackground(False)
        self.tabWidget1.setStyleSheet("background-color: rgb(189, 199, 245)")
        self.tabWidget1.setObjectName("tabWidget1")
        self.triage = QtWidgets.QWidget()
        self.triage.setObjectName("triage")
        self.label_4 = QtWidgets.QLabel(self.triage)
        self.label_4.setGeometry(QtCore.QRect(240, 90, 341, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.buttonTriage = QtWidgets.QPushButton(self.triage)
        self.buttonTriage.setGeometry(QtCore.QRect(350, 280, 101, 23))
        self.buttonTriage.setObjectName("buttonTriage")
        self.resultadoTriage = QtWidgets.QLabel(self.triage)
        self.resultadoTriage.setGeometry(QtCore.QRect(250, 330, 341, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(12)
        self.resultadoTriage.setFont(font)
        self.resultadoTriage.setObjectName("resultadoTriage")

        self.completer1 = QtWidgets.QCompleter(sintomas)
        self.completer2 = QtWidgets.QCompleter(sintomas)
        self.completer3 = QtWidgets.QCompleter(sintomas)
        self.completer4 = QtWidgets.QCompleter(sintomas)
        self.completer5 = QtWidgets.QCompleter(sintomas)


        self.comboBox = QtWidgets.QComboBox(self.triage)
        self.comboBox.setGeometry(QtCore.QRect(280, 120, 241, 22))
        
        self.comboBox.setEditable(True)
        self.comboBox.setCompleter(self.completer1)
        self.comboBox.setStyleSheet("background-color:white\n"
                
"")
        
        self.comboBox.setObjectName("comboBox")
        self.comboBox_2 = QtWidgets.QComboBox(self.triage)
        
        self.comboBox_2.setEditable(True)
        self.comboBox_2.setCompleter(self.completer2)
        self.comboBox_2.setGeometry(QtCore.QRect(280, 150, 241, 22))
        self.comboBox_2.setStyleSheet("background-color:white\n"
"")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_3 = QtWidgets.QComboBox(self.triage)
        
        self.comboBox_3.setEditable(True)
        self.comboBox_3.setCompleter(self.completer3)
        self.comboBox_3.setGeometry(QtCore.QRect(280, 180, 241, 22))
        self.comboBox_3.setStyleSheet("background-color:white\n"
"")
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_4 = QtWidgets.QComboBox(self.triage)

        self.comboBox_4.setEditable(True)
        self.comboBox_4.setCompleter(self.completer4)
        self.comboBox_4.setGeometry(QtCore.QRect(280, 210, 241, 22))
        self.comboBox_4.setStyleSheet("background-color:white\n"
"")
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_5 = QtWidgets.QComboBox(self.triage)

        self.comboBox_5.setEditable(True)
        self.comboBox_5.setCompleter(self.completer5)

        self.comboBox_5.setGeometry(QtCore.QRect(280, 240, 241, 22))
        self.comboBox_5.setStyleSheet("background-color:white\n"
"")
        self.comboBox_5.setObjectName("comboBox_5")
        self.tabWidget1.addTab(self.triage, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.label_3 = QtWidgets.QLabel(self.tab_2)
        self.label_3.setGeometry(QtCore.QRect(20, 30, 71, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.tablaReservas = QtWidgets.QTableWidget(self.tab_2)
        self.tablaReservas.setGeometry(QtCore.QRect(60, 90, 631, 221))
        self.tablaReservas.setStyleSheet("background-color: white\n"
"")
        self.tablaReservas.setRowCount(10)
        self.tablaReservas.setColumnCount(6)
        self.tablaReservas.setObjectName("tablaReservas")
        self.buttonActualzarReservas = QtWidgets.QPushButton(self.tab_2)
        self.buttonActualzarReservas.setGeometry(QtCore.QRect(640, 320, 101, 31))
        self.buttonActualzarReservas.setAutoFillBackground(False)
        self.buttonActualzarReservas.setStyleSheet("background-color:white\n"
"")
        self.buttonActualzarReservas.setObjectName("buttonActualzarReservas")
        self.rutReservas = QtWidgets.QLineEdit(self.tab_2)
        self.rutReservas.setGeometry(QtCore.QRect(170, 60, 113, 20))
        self.rutReservas.setStyleSheet("background-color: white\n"
"")
        self.rutReservas.setObjectName("rutReservas")
        self.label_5 = QtWidgets.QLabel(self.tab_2)
        self.label_5.setGeometry(QtCore.QRect(100, 60, 81, 20))
        self.label_5.setObjectName("label_5")
        self.buscarReservas = QtWidgets.QPushButton(self.tab_2)
        self.buscarReservas.setGeometry(QtCore.QRect(300, 60, 101, 21))
        self.buscarReservas.setAutoFillBackground(False)
        self.buscarReservas.setStyleSheet("background-color:white\n"
"")
        self.buscarReservas.setObjectName("buscarReservas")
        self.label_6 = QtWidgets.QLabel(self.tab_2)
        self.label_6.setGeometry(QtCore.QRect(20, 390, 111, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.idCita = QtWidgets.QLineEdit(self.tab_2)
        self.idCita.setGeometry(QtCore.QRect(150, 430, 113, 20))
        self.idCita.setStyleSheet("background-color: white\n"
"")
        self.idCita.setObjectName("idCita")
        self.label_7 = QtWidgets.QLabel(self.tab_2)
        self.label_7.setGeometry(QtCore.QRect(110, 430, 41, 20))
        self.label_7.setObjectName("label_7")
        self.confirmarCita = QtWidgets.QPushButton(self.tab_2)
        self.confirmarCita.setGeometry(QtCore.QRect(270, 430, 101, 21))
        self.confirmarCita.setAutoFillBackground(False)
        self.confirmarCita.setStyleSheet("background-color:white\n"
"")
        self.confirmarCita.setObjectName("confirmarCita")
        self.tabWidget1.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.tablaEspecialistas = QtWidgets.QTableWidget(self.tab_3)
        self.tablaEspecialistas.setGeometry(QtCore.QRect(70, 120, 631, 221))
        self.tablaEspecialistas.setStyleSheet("background-color: white\n"
"")
        self.tablaEspecialistas.setRowCount(10)
        self.tablaEspecialistas.setColumnCount(5)
        self.tablaEspecialistas.setObjectName("tablaEspecialistas")
        self.label_9 = QtWidgets.QLabel(self.tab_3)
        self.label_9.setGeometry(QtCore.QRect(50, 70, 111, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.actualizarEspecialistas = QtWidgets.QPushButton(self.tab_3)
        self.actualizarEspecialistas.setGeometry(QtCore.QRect(600, 350, 101, 31))
        self.actualizarEspecialistas.setAutoFillBackground(False)
        self.actualizarEspecialistas.setStyleSheet("background-color:white\n"
        
"")
        self.actualizarEspecialistas.setObjectName("actualizarEspecialistas")
        self.buscarEspecialistas = QtWidgets.QPushButton(self.tab_3)
        self.buscarEspecialistas.setGeometry(QtCore.QRect(360, 70, 101, 21))
        self.buscarEspecialistas.setAutoFillBackground(False)
        self.buscarEspecialistas.setStyleSheet("background-color:white\n"
"")
        self.buscarEspecialistas.setObjectName("buscarEspecialistas")
        self.label_10 = QtWidgets.QLabel(self.tab_3)
        self.label_10.setGeometry(QtCore.QRect(160, 70, 81, 20))
        self.label_10.setObjectName("label_10")
        self.especialidad = QtWidgets.QLineEdit(self.tab_3)
        self.especialidad.setGeometry(QtCore.QRect(230, 70, 113, 20))
        self.especialidad.setStyleSheet("background-color: white\n"
"")
        self.especialidad.setObjectName("especialidad")
        self.tabWidget1.addTab(self.tab_3, "")
        self.testtab = QtWidgets.QWidget()
        self.testtab.setObjectName("testtab")
        self.send = QtWidgets.QPushButton(self.testtab)
        self.send.setGeometry(QtCore.QRect(140, 90, 75, 23))
        self.send.setObjectName("send")
        self.echoinput = QtWidgets.QLineEdit(self.testtab)
        self.echoinput.setGeometry(QtCore.QRect(50, 60, 251, 20))
        self.echoinput.setStyleSheet("background-color: white\n"
"")
        self.echoinput.setText("")
        self.echoinput.setObjectName("echoinput")
        self.outputLabel = QtWidgets.QLabel(self.testtab)
        self.outputLabel.setGeometry(QtCore.QRect(30, 160, 71, 16))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.outputLabel.setFont(font)
        self.outputLabel.setObjectName("outputLabel")
        self.tabWidget1.addTab(self.testtab, "")
        self.verticalLayout_2.addWidget(self.tabWidget1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 808, 21))
        self.menubar.setObjectName("menubar")
        self.menuFIle = QtWidgets.QMenu(self.menubar)
        self.menuFIle.setObjectName("menuFIle")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuFIle.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget1.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_4.setText(_translate("MainWindow", "Ingrese hasta 5 sintomas relevantes:"))
        self.buttonTriage.setText(_translate("MainWindow", "Calcular Triage"))
        self.resultadoTriage.setText(_translate("MainWindow", "Resultado Triage:"))
        self.tabWidget1.setTabText(self.tabWidget1.indexOf(self.triage), _translate("MainWindow", "Triage"))
        self.label_3.setText(_translate("MainWindow", "Reservas:"))
        self.buttonActualzarReservas.setText(_translate("MainWindow", "Actualizar"))
        self.label_5.setText(_translate("MainWindow", "RUT Paciente:"))
        self.buscarReservas.setText(_translate("MainWindow", "Buscar"))
        self.label_6.setText(_translate("MainWindow", "Confirmar Cita:"))
        self.label_7.setText(_translate("MainWindow", "ID Cita:"))
        self.confirmarCita.setText(_translate("MainWindow", "Confirmar"))
        self.tabWidget1.setTabText(self.tabWidget1.indexOf(self.tab_2), _translate("MainWindow", "Agenda"))
        self.label_9.setText(_translate("MainWindow", "Especialistas:"))
        self.actualizarEspecialistas.setText(_translate("MainWindow", "Actualizar"))
        self.buscarEspecialistas.setText(_translate("MainWindow", "Buscar"))
        self.label_10.setText(_translate("MainWindow", "Especialidad:"))
        self.tabWidget1.setTabText(self.tabWidget1.indexOf(self.tab_3), _translate("MainWindow", "Especialistas"))
        self.send.setText(_translate("MainWindow", "Enviar"))
        self.outputLabel.setText(_translate("MainWindow", "Mensaje:"))
        self.tabWidget1.setTabText(self.tabWidget1.indexOf(self.testtab), _translate("MainWindow", "Test"))
        self.menuFIle.setTitle(_translate("MainWindow", "FIle"))

        self.send.clicked.connect(self.clicked)
        self.buttonTriage.clicked.connect(self.clickTriage)
        self.actualizarEspecialistas.clicked.connect(self.clickEspecialistas)
        self.buscarEspecialistas.clicked.connect(self.filter_table)
        self.buttonActualzarReservas.clicked.connect(self.clickHoras)
        self.buscarReservas.clicked.connect(self.filter_table2)
        self.confirmarCita.clicked.connect(self.clickConfi)



        for sintoma in sintomas:
                self.comboBox.addItem(sintoma)
                self.comboBox_2.addItem(sintoma)
                self.comboBox_3.addItem(sintoma)
                self.comboBox_4.addItem(sintoma)
                self.comboBox_5.addItem(sintoma)

        self.comboBox.setCurrentIndex(-1)
        self.comboBox_2.setCurrentIndex(-1)
        self.comboBox_3.setCurrentIndex(-1)
        self.comboBox_4.setCurrentIndex(-1)
        self.comboBox_5.setCurrentIndex(-1)



    def filter_table2(self):
        search_text = self.rutReservas.text().lower()
        for row in range(self.tablaReservas.rowCount()):
            item = self.tablaReservas.item(row, 2)
            if item is not None:
                cell_data = item.text().lower()
                if search_text in cell_data:
                    self.tablaReservas.showRow(row)
                else:
                    self.tablaReservas.hideRow(row)




    def filter_table(self):
        search_text = self.especialidad.text().lower()
        for row in range(self.tablaEspecialistas.rowCount()):
            item = self.tablaEspecialistas.item(row, 2)
            if item is not None:
                cell_data = item.text().lower()
                if search_text in cell_data:
                    self.tablaEspecialistas.showRow(row)
                else:
                    self.tablaEspecialistas.hideRow(row)

    def clickEspecialistas(self):
        input1 = "a"
        inputLen = len(input1)

        # Format the length with leading zeros to make it 5 digits
        inputLenStr = '{:05d}'.format(inputLen)

        message = inputLenStr + 'espec' + input1

        # Convert the message string to bytes just before sending
        message_bytes = message.encode('utf-8')

        print(message)

        sock.sendall(message_bytes)

        amount_received = 0
        amount_expected = int(sock.recv(5))

        while amount_received < amount_expected:
            data = sock.recv(amount_expected - amount_received)
            amount_received += len(data)

        print("Processing ...")
        resp = '{:05d}'.format(len(data)) + data.decode('utf-8')

        respSize = resp[0:5]
        respSizeInt = int(respSize)
        respCode = resp[10:12]

        if respCode == 'OK':
            rows = re.findall(r'\(\d+, .*?\)', resp[12:len(resp)])
            array_of_arrays = [re.split(r',\s*', row[1:-1]) for row in rows]  # Remove parentheses

            self.tablaEspecialistas.setRowCount(0)
            for row_number, row_data in enumerate(array_of_arrays):
                self.tablaEspecialistas.insertRow(row_number)
                for column_number, data in enumerate(row_data):
                    self.tablaEspecialistas.setItem(row_number, column_number, QtWidgets.QTableWidgetItem(str(data)))
        else:
            print('error')

    def clickHoras(self):
        input1 = "a"
        inputLen = len(input1)

        # Format the length with leading zeros to make it 5 digits
        inputLenStr = '{:05d}'.format(inputLen)

        message = inputLenStr + 'horas' + input1

        # Convert the message string to bytes just before sending
        message_bytes = message.encode('utf-8')

        print(message)

        sock.sendall(message_bytes)

        amount_received = 0
        amount_expected = int(sock.recv(5))

        while amount_received < amount_expected:
            data = sock.recv(amount_expected - amount_received)
            amount_received += len(data)

        print("Processing ...")
        resp = '{:05d}'.format(len(data)) + data.decode('utf-8')

        respSize = resp[0:5]
        respSizeInt = int(respSize)
        respCode = resp[10:12]

        if respCode == 'OK':
            # Split the string into individual records and remove '[' and ']' characters
            records = resp[12:].replace('[', '').replace(']', '').split(',')

            self.tablaReservas.setRowCount(0)
            self.tablaReservas.setColumnCount(7)
            
            # Create rows of 7 elements each
            for row_number in range(0, len(records), 7):
                row_data = records[row_number:row_number + 7]
                
                # Create a new row in the QTableWidget
                self.tablaReservas.insertRow(row_number // 7)
                
                for column_number, data in enumerate(row_data):
                    self.tablaReservas.setItem(row_number // 7, column_number, QtWidgets.QTableWidgetItem(data.strip()))  # Trim any leading/trailing spaces

        else:
            print('error')


    def clickConfi(self):

        input2 = self.idCita.text()
        print(input2)

   

        # Format the length with leading zeros to make it 5 digits
        inputLenStr = '{:05d}'.format(len(input2))

        print(inputLenStr)

        message = inputLenStr + 'confi' + input2
        
        # Convert the message string to bytes just before sending
        message_bytes = message.encode('utf-8')

        print(message)

        sock.sendall(message_bytes)
        
        amount_received = 0
        amount_expected = int(sock.recv(5))

        while amount_received < amount_expected:
            data = sock.recv(amount_expected - amount_received)
            amount_received += len(data)


       









    def clickTriage(self):

        input1 = self.comboBox.currentText() + "-" + self.comboBox_2.currentText() + "-" + self.comboBox_3.currentText() + "-" + self.comboBox_4.currentText() + "-" + self.comboBox_5.currentText()

        inputLen = len(input1)

        # Format the length with leading zeros to make it 5 digits
        inputLenStr = '{:05d}'.format(inputLen)

        message = inputLenStr + 'triaj' + input1
        
        # Convert the message string to bytes just before sending
        message_bytes = message.encode('utf-8')

        print(message)

        sock.sendall(message_bytes)

        amount_received = 0
        amount_expected = int(sock.recv(5))

        while amount_received < amount_expected:
            data = sock.recv(amount_expected - amount_received)
            amount_received += len(data)


        print("Processing ...")
        resp = '{:05d}'.format(len(data)) + data.decode('utf-8')

        respSize = resp[0:5]

        #print('size:', respSize)

        respSizeInt = int(respSize)
       # print('sizeInt:', respSizeInt)

        respCode = resp[10:12]
        #print('code:', respCode)

        if(respCode == 'OK'):
            print("Mensaje: " + resp[12:len(resp)])
            self.resultadoTriage.setText("Resultado Triage: " + resp[12:len(resp)])
            self.update()



        else: 
            print('error')
            self.resultadoTriage.setText("Mensaje: " 'Hubo un error al procesar el mensaje')
            self.update()

    

    def clicked(self):

        input1 = self.echoinput.text()
        inputLen = len(input1)

        # Format the length with leading zeros to make it 5 digits
        inputLenStr = '{:05d}'.format(inputLen)
        
        # Create the message as a regular string
        message = inputLenStr + 'servi' + input1
        
        # Convert the message string to bytes just before sending
        message_bytes = message.encode('utf-8')

        sock.sendall(message_bytes)

        amount_received = 0
        amount_expected = int(sock.recv(5))

        while amount_received < amount_expected:
            data = sock.recv(amount_expected - amount_received)
            amount_received += len(data)


        print("Processing ...")
        resp = '{:05d}'.format(len(data)) + data.decode('utf-8')

        respSize = resp[0:5]

        #print('size:', respSize)

        respSizeInt = int(respSize)
       # print('sizeInt:', respSizeInt)

        respCode = resp[10:12]
        #print('code:', respCode)

        if(respCode == 'OK'):
            print("Mensaje: " + resp[12:len(resp)])
            self.outputLabel.setText("Mensaje: " + resp[12:len(resp)])
            self.update()



        else: 
            print('error')
            self.outputLabel.setText("Mensaje: " 'Hubo un error al procesar el mensaje')
            self.update()


    def update(self):
        self.outputLabel.adjustSize()



if __name__ == "__main__":
    import sys
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # Connect the socket to the port where the server is listening
    server_address = ('localhost', 5000)
    print('Connecting to {} port {}'.format(*server_address))
    sock.connect(server_address)
    print('Connected successfully')

    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
