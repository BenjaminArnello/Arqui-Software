# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'vistaRecetas.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
import socket
import re
import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
import socket
import sys

import subprocess

def open_pdf(file_path):
    try:
        subprocess.Popen([file_path], shell=True)
    except FileNotFoundError:
        print("Archivo no encontrado.")
    except Exception as e:
        print(f"Ocurrio un error: {e}")


def Generar_PDF(datos):
    # Crear un archivo PDF con la información de la receta
    pdf_filename = f"receta_{datos[0]}.pdf"
    print(pdf_filename)
    pdf = SimpleDocTemplate(pdf_filename, pagesize=letter)

    # Definir estilos para el documento
    estilos = getSampleStyleSheet()

    # Crear contenido para el PDF
    contenido = []

    # Título
    contenido.append(Paragraph("RECETA MÉDICA", estilos['Title']))

    contenido.append(Spacer(1, 12))

    # Detalles de la receta
    fecha_actual = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    contenido.append(Paragraph(f"Fecha: {fecha_actual}", estilos['Heading2']))
    contenido.append(Paragraph(f"Paciente: {datos[0].replace('_',' ')}", estilos['Heading2']))
    contenido.append(Paragraph(f"Rut: {datos[1]}", estilos['Heading2']))

    contenido.append(Spacer(1, 12))

    # Indicaciones
    contenido.append(Paragraph("Indicaciones:", estilos['Heading3']))
    contenido.append(Spacer(1, 6))
    contenido.append(Paragraph(f"{datos[2]}", estilos['BodyText']))

    # Espacio
    contenido.append(Spacer(1, 12))

    # Firma del médico
    contenido.append(Paragraph(f"Firma del Doctor/ra: ", estilos['Heading2']))

    # Construir el PDF con el contenido
    pdf.build(contenido)

    print(f"El archivo PDF {pdf_filename} ha sido creado con éxito.")


    return datos



def format_chilean_rut(rut):
    if len (rut) == 0:
        return "Invalid Rut"
    
    rut = rut.replace(".", "").replace("-", "").upper()  # Remove separators and convert to uppercase
    
    if len(rut) < 2 or not rut[:-1].isdigit():
        return "Invalid RUT"

    rut_number = rut[:-1].zfill(8)  # Pad with zeros if there are only 8 digits
    verification_digit = rut[-1]

    calculated_verification = 0
    multiplier = 2
    for digit in reversed(rut_number):
        calculated_verification += int(digit) * multiplier
        multiplier += 1
        if multiplier > 7:
            multiplier = 2

    remainder = calculated_verification % 11
    computed_digit = 11 - remainder if remainder != 0 else 0

    if computed_digit == 10:
        computed_digit = 'K'

    if str(computed_digit) == verification_digit:
        formatted_rut = f"{rut_number}-{computed_digit}"
        return formatted_rut
    else:
        return "Invalid RUT"
    




class Ui_vistaRecetas(object):

    def connect (self):
        import sys

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Connect the socket to the port where the server is listening
        server_address = ('localhost', 5000)
        print('Connecting to {} port {}'.format(*server_address))
        sock.connect(server_address)
        print('Connected successfully')

        return sock
    
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = ('localhost', 5000)
    sock.connect(server_address)
    print('Connected successfully via funcion')


    def setupUi(self, vistaRecetas):
        vistaRecetas.setObjectName("vistaRecetas")
        vistaRecetas.setEnabled(True)
        vistaRecetas.resize(662, 511)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(vistaRecetas.sizePolicy().hasHeightForWidth())
        vistaRecetas.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(vistaRecetas)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setContentsMargins(20, 15, 20, 15)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 0, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_2.addWidget(self.pushButton, 6, 2, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout_2.addWidget(self.pushButton_2, 6, 1, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 0, 0, 1, 1)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(5)
        sizePolicy.setVerticalStretch(5)
        sizePolicy.setHeightForWidth(self.tableWidget.sizePolicy().hasHeightForWidth())
        self.tableWidget.setSizePolicy(sizePolicy)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        self.gridLayout.addWidget(self.tableWidget, 1, 0, 1, 2)
        self.gridLayout_2.addLayout(self.gridLayout, 2, 0, 1, 3)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.gridLayout_2.addWidget(self.label_6, 4, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem, 6, 0, 1, 1)
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setObjectName("textEdit")
        self.gridLayout_2.addWidget(self.textEdit, 5, 0, 1, 3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.gridLayout_2.addLayout(self.horizontalLayout, 3, 0, 1, 3)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 1, 0, 1, 1)
        vistaRecetas.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(vistaRecetas)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 662, 21))
        self.menubar.setObjectName("menubar")
        vistaRecetas.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(vistaRecetas)
        self.statusbar.setObjectName("statusbar")
        vistaRecetas.setStatusBar(self.statusbar)

        self.retranslateUi(vistaRecetas)
        QtCore.QMetaObject.connectSlotsByName(vistaRecetas)

    def retranslateUi(self, vistaRecetas):
        _translate = QtCore.QCoreApplication.translate
        vistaRecetas.setWindowTitle(_translate("vistaRecetas", "MainWindow"))
        self.label.setText(_translate("vistaRecetas", "Nombre: "))
        self.pushButton.setText(_translate("vistaRecetas", "Emitir Receta"))
        self.pushButton_2.setText(_translate("vistaRecetas", "Cerrar "))
        self.label_5.setText(_translate("vistaRecetas", "Recetas:"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("vistaRecetas", "Fecha"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("vistaRecetas", "Receta"))
        self.label_6.setText(_translate("vistaRecetas", "Emitir Receta Medica:"))
        self.pushButton_3.setText(_translate("vistaRecetas", "Actualizar"))
        self.label_2.setText(_translate("vistaRecetas", "Rut: 1234567-8"))
        
        self.pushButton_3.clicked.connect(self.actualizarRecetas)
        self.pushButton.clicked.connect(self.agregarReceta)
        sock = self.connect()

    def popUpAlert(self, texto):
        msg = QMessageBox()
        msg.setWindowTitle("Alerta")
        msg.setText(texto)
        msg.setIcon(QMessageBox.Warning)
        x = msg.exec_()
    
    def popUpInfo(self, texto):
        msg = QMessageBox()
        msg.setWindowTitle("Info")
        msg.setText(texto)
        msg.setIcon(QMessageBox.Information)
        x = msg.exec_()


    
    def popUpCritical(self, texto):
        msg = QMessageBox()
        msg.setWindowTitle("Error")
        msg.setText(texto)
        msg.setIcon(QMessageBox.Critical)
        x = msg.exec_()



    def actualizarRecetas(self):


        sock = self.sock
        rut = self.label_2.text()
        rut = rut[5:]
        print(rut)
        rut = format_chilean_rut(rut)

        if rut != "Invalid RUT":

            print(f"{rut} Valido.")

            input1 = "RP" + rut
            inputLen = len(input1)

            # Format the length with leading zeros to make it 5 digits
            inputLenStr = '{:05d}'.format(inputLen)

            message = inputLenStr + 'recet' + input1

            # Convert the message string to bytes just before sending
            message_bytes = message.encode('utf-8')

            print(message)

            

            sock.sendall(message_bytes)

            amount_received = 0
            amount_expected = int(sock.recv(5))

            while amount_received < amount_expected:
                data = sock.recv(amount_expected - amount_received)
                amount_received += len(data)

            print("Processing ...")
            print(data)
            resp = '{:05d}'.format(len(data)) + data.decode('utf-8')

            respSize = resp[0:5]
            respSizeInt = int(respSize)
            respCode = resp[10:12]

            print(resp[12:len(resp)])
            print("\n")

            if respCode == 'OK':


                if len(resp[12:len(resp)]) == 0:
                    self.popUpAlert("No se encuentran recetas para este paciente")

                else:

                    split_values = resp[12:len(resp)].split('/')

                    print (split_values)

                    # Process individual strings
                    array_of_arrays = []

                    for value in split_values:

                        valueSplit = value[1:len(value)-1].split("), ")

                        print(value)

                        fecha = valueSplit[0] + ")"
                        print(fecha)
                        fecha = eval(fecha)
                        print(fecha)

                        formatted_date = fecha.strftime("%Y-%m-%d %H:%M:%S")
                        print(formatted_date)
                        texto = valueSplit[1]
                        print(texto)

                        array_of_arrays.append([formatted_date,texto])

                    self.tableWidget.setRowCount(0)
                    for row_number, row_data in enumerate(array_of_arrays):
                        self.tableWidget.insertRow(row_number)
                        for column_number, data in enumerate(row_data):
                            item = QtWidgets.QTableWidgetItem(str(data))
                            self.tableWidget.setItem(row_number, column_number, item)
                            if column_number == 1:  # Assuming the second column needs to stretch
                                item.setTextAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)  # Align text left
                                width = len(str(data)) * 10  # Adjust the multiplier to your preference
                                if width > self.tableWidget.columnWidth(column_number):
                                    self.tableWidget.setColumnWidth(column_number, width)
            else:
                self.popUpCritical("Ocurrio un error al procesar la solicitud, porfavor intente nuevamente")

        else:
            print(f"{rut} no es valido.")
            self.popUpCritical("El Rut ingresado no es valido")

    def agregarReceta(self):
            sock = self.connect()
            rut = self.label_2.text()
            rut = rut[5:]
            print(rut)
            rut = format_chilean_rut(rut)


            texto = self.textEdit.toPlainText()
            print(texto)

            texto = texto.replace('/', '|')
            texto = texto.replace('\n', ' ')
            texto = texto.replace(', ', ",")

            print(texto)

            if len(texto) == 0:
                self.popUpAlert("No puede ingresarse una observación vacia")



            elif rut != "Invalid Rut":
                print("Rut Valido")
                input1 = "CR" + rut + "/" + texto
                inputLen = len(input1)

                inputLenStr = '{:05d}'.format(inputLen)

                message = inputLenStr + 'recet' + input1

                # Convert the message string to bytes just before sending
                message_bytes = message.encode('utf-8')

                print(message)

                sock.sendall(message_bytes)

                amount_received = 0
                amount_expected = int(sock.recv(5))

                while amount_received < amount_expected:
                    data = sock.recv(amount_expected - amount_received)
                    amount_received += len(data)

                print("Processing ...")
                resp = '{:05d}'.format(len(data)) + data.decode('utf-8')

                respSize = resp[0:5]
                respSizeInt = int(respSize)
                respCode = resp[10:12]

                if respCode == 'OK':


                    # Format the current date and time as a string

                    current_date = datetime.datetime.now()
                    current_date_string = current_date.strftime("%Y-%m-%d %H:%M:%S")

                    self.actualizarRecetas()

                    row_position = self.tableWidget.rowCount()  # Get the current row count
                    self.tableWidget.insertRow(row_position)  # Insert a new row at the end

                    # Fill the cells in the newly inserted row (optional)
                    self.tableWidget.setItem(row_position, 0, QtWidgets.QTableWidgetItem(current_date_string))
                    self.tableWidget.setItem(row_position, 1, QtWidgets.QTableWidgetItem(texto))

                    datos = [self.label.text()[17:].replace(" ","_"), rut, texto]

                    Generar_PDF(datos)
                    pdf_path = f"receta_{datos[0]}.pdf"

                    open_pdf(pdf_path)
                    
                    self.popUpInfo("Entrada agregada exitosamente")
                
                else: self.popUpCritical("Ocurrio un error al ingresar la observación, intente nuevamente")
            



if __name__ == "__main__":
    import sys


    # Connect the socket to the port where the server is listening
    server_address = ('localhost', 5000)
    print('Connecting to {} port {}'.format(*server_address))

    print('Connected successfully')
    app = QtWidgets.QApplication(sys.argv)
    vistaRecetas = QtWidgets.QMainWindow()
    ui = Ui_vistaRecetas()
    ui.setupUi(vistaRecetas)
    vistaRecetas.show()
    sys.exit(app.exec_())
