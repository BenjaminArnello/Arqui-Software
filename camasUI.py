# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'camas.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

import socket
import re

def format_chilean_rut(rut):
    if len (rut) == 0:
        return "Invalid Rut"
    
    rut = rut.replace(".", "").replace("-", "").upper()  # Remove separators and convert to uppercase
    
    if len(rut) < 2 or not rut[:-1].isdigit():
        return "Invalid RUT"

    rut_number = rut[:-1].zfill(8)  # Pad with zeros if there are only 8 digits
    verification_digit = rut[-1]

    calculated_verification = 0
    multiplier = 2
    for digit in reversed(rut_number):
        calculated_verification += int(digit) * multiplier
        multiplier += 1
        if multiplier > 7:
            multiplier = 2

    remainder = calculated_verification % 11
    computed_digit = 11 - remainder if remainder != 0 else 0

    if computed_digit == 10:
        computed_digit = 'K'

    if str(computed_digit) == verification_digit:
        formatted_rut = f"{rut_number}-{computed_digit}"
        return formatted_rut
    else:
        return "Invalid RUT"


class Ui_Camas(object):


    
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_address = ('localhost', 5000)
    print('Connecting to {} port {}'.format(*server_address))
    sock.connect(server_address)
    print('Connected successfully')

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(677, 683)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.nombrePaciente = QtWidgets.QLabel(self.centralwidget)
        self.nombrePaciente.setObjectName("nombrePaciente")
        self.verticalLayout.addWidget(self.nombrePaciente)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.rutLabel = QtWidgets.QLabel(self.centralwidget)
        self.rutLabel.setObjectName("rutLabel")
        self.horizontalLayout.addWidget(self.rutLabel)
        self.salaPaciente = QtWidgets.QLabel(self.centralwidget)
        self.salaPaciente.setObjectName("salaPaciente")
        self.horizontalLayout.addWidget(self.salaPaciente)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        self.editTipoCama = QtWidgets.QLineEdit(self.centralwidget)
        self.editTipoCama.setObjectName("editTipoCama")
        self.horizontalLayout_2.addWidget(self.editTipoCama)
        self.buttonFiltrarCamas = QtWidgets.QPushButton(self.centralwidget)
        self.buttonFiltrarCamas.setObjectName("buttonFiltrarCamas")
        self.horizontalLayout_2.addWidget(self.buttonFiltrarCamas)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.tableCamas = QtWidgets.QTableWidget(self.centralwidget)
        self.tableCamas.setObjectName("tableCamas")
        self.tableCamas.setColumnCount(0)
        self.tableCamas.setRowCount(0)
        self.verticalLayout_2.addWidget(self.tableCamas)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout_3.addWidget(self.pushButton)
        self.buttonAsignarCamas = QtWidgets.QPushButton(self.centralwidget)
        self.buttonAsignarCamas.setObjectName("buttonAsignarCamas")
        self.horizontalLayout_3.addWidget(self.buttonAsignarCamas)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 677, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.nombrePaciente.setText(_translate("MainWindow", "Nombre: Juanito Perez Rosales del Carmen"))
        self.rutLabel.setText(_translate("MainWindow", "Rut: 12345678-5"))
        self.salaPaciente.setText(_translate("MainWindow", "Sala Actual: 301, Cama 3"))
        self.label_2.setText(_translate("MainWindow", "Disponibilidad de Camas"))
        self.label_3.setText(_translate("MainWindow", "Tipo:"))
        self.buttonFiltrarCamas.setText(_translate("MainWindow", "Filtrar"))
        self.pushButton.setText(_translate("MainWindow", "Actualizar"))
        self.buttonAsignarCamas.setText(_translate("MainWindow", "Asignar"))
        self.pushButton.clicked.connect(self.actualizarCamas)
        self.buttonFiltrarCamas.clicked.connect(self.filter_table3)
        self.buttonAsignarCamas.clicked.connect(self.asignarCama)


    def popUpAlert(self, texto):
        msg = QMessageBox()
        msg.setWindowTitle("Alerta")
        msg.setText(texto)
        msg.setIcon(QMessageBox.Warning)
        x = msg.exec_()
    
    def popUpInfo(self, texto):
        msg = QMessageBox()
        msg.setWindowTitle("Info")
        msg.setText(texto)
        msg.setIcon(QMessageBox.Information)
        x = msg.exec_()

    def popUpCritical(self, texto):
        msg = QMessageBox()
        msg.setWindowTitle("Error")
        msg.setText(texto)
        msg.setIcon(QMessageBox.Critical)
        x = msg.exec_()


    
    def asignarCama(self):
        rut = self.rutLabel.text()[5:]
        print(rut)
        sock = self.sock
        idCamaOcupada = ""
        if self.salaPaciente.text() == "Sala: No internado":
             idCamaOcupada = "0"
        else:
            split = self.salaPaciente.text().split(",")
            print(split[1])
            split2 = split[1].split(":")
            print (split2[1])
            idCamaOcupada = split2[1]

        selected_rows = set()
        for item in self.tableCamas.selectedItems():
                selected_rows.add(item.row())

                selected_data = []
        if len(selected_rows) == 0:
            self.popUpAlert("No se ha elegido ninguna habitación")
        
        elif len(selected_rows) > 1:
             self.popUpAlert("Porfavor eliga solo una habitación")

        else:
            for row in selected_rows:
                    row_data = []
                    for column in range(self.tableCamas.columnCount()):
                            item = self.tableCamas.item(row, column)
                            if item is not None:
                                    row_data.append(item.text())
                            else:
                                    row_data.append('')
                    selected_data.append(row_data)

            # Print the data of selected rows
            for row_data in selected_data:
                print(row_data)

                print(selected_data)

            idSala = selected_data[0][0]

            print(idSala)

            print(rut)
            rut = format_chilean_rut(rut)

            if rut != "Invalid RUT" and idSala != "":
                input1 = rut + "/" + idSala + "/" + idCamaOcupada
                inputLen = len(input1)

                # Format the length with leading zeros to make it 5 digits
                inputLenStr = '{:05d}'.format(inputLen)

                message = inputLenStr + 'camas' + "SC" + input1

                # Convert the message string to bytes just before sending
                message_bytes = message.encode('utf-8')

                print(message)

                sock.sendall(message_bytes)

                amount_received = 0
                amount_expected = int(sock.recv(5))

                while amount_received < amount_expected:
                    data = sock.recv(amount_expected - amount_received)
                    amount_received += len(data)

                print("Processing ...")
                resp = '{:05d}'.format(len(data)) + data.decode('utf-8')
                print (resp)

                respSize = resp[0:5]
                respSizeInt = int(respSize)
                respCode = resp[10:12]
                respCode2 = resp[12:14]
                print(respCode)
                print(respCode2)

                if respCode == 'OK':
                    if respCode2 == 'er':
                     self.popUpAlert("Ocurrio un error al asignar la cama")
   
                    else:
                        split3 = resp.split("/")
                        idCamaNuevo = split3[1]
                        self.popUpInfo("Asignación realizada correctamente")
                        self.actualizarCamas()
                        self.salaPaciente.setText("Sala: " + idSala + ",Cama:" + idCamaNuevo)

                else:
                    self.popUpCritical("Ocurrio un error al asignar la cama")
                    print('error')
                    self.actualizarCamas()
            else:
                    print(f"{rut} no es valido.")
                    self.popUpCritical("El Rut ingresado no es valido")   
                    self.actualizarCamas()



    def actualizarCamas(self):
        rut = self.rutLabel.text()
        sock = self.sock
        i = "a"
        inputLenStr = '{:05d}'.format(len(i))
        message = inputLenStr + 'camasDC' + i
        message_bytes = message.encode('utf-8')
        print(message)
        sock.sendall(message_bytes)

        amount_received = 0
        amount_expected = int(sock.recv(5))

        while amount_received < amount_expected:
            data = sock.recv(amount_expected - amount_received)
            amount_received += len(data)
        print("Processing ...")


        resp = '{:05d}'.format(len(data)) + data.decode('utf-8')
        print(resp)
        salas = resp[12:len(resp) - 1].split('/')

        respSize = resp[0:5]
        respSizeInt = int(respSize)
        respCode = resp[10:12]
        # No disp = tableWidget
        if respCode == 'OK':
            for row in range(self.tableCamas.rowCount()):
                self.tableCamas.showRow(row)
            array_of_arrays = []
            for sala in salas:
                print(sala)
                aux = sala[1:].split(',')
                print(aux)
                aux[3] = aux[3].replace("Decimal('","")
                aux[3] = aux[3].replace("')","")
                aux[3] = aux[3].replace(")","")
                aux[4] = aux[4].replace("Decimal('","")
                aux[4] = aux[4].replace("')","")
                aux[4] = aux[4].replace(")","")
                print(aux)
                array_of_arrays.append(aux)

           


            header_titles = ["Id", "Categoria", "Camas totales", "Camas Ocupadas", "Camas Disponibles"]
            self.tableCamas.setColumnCount(len(header_titles))
            self.tableCamas.setHorizontalHeaderLabels(header_titles)

            # Assuming array_of_arrays contains the data as per the structure in your response
            self.tableCamas.setRowCount(len(array_of_arrays))

            for row_number, row_data in enumerate(array_of_arrays):
                for column_number, data in enumerate(row_data):
                    item = QtWidgets.QTableWidgetItem(str(data))
                    self.tableCamas.setItem(row_number, column_number, item)
        else:
                print('error')
    
    def filter_table3(self):
        search_text = self.editTipoCama.text().lower()
        for row in range(self.tableCamas.rowCount()):
            item = self.tableCamas.item(row, 1)
            if item is not None:
                cell_data = item.text().lower()
                if search_text in cell_data:
                    self.tableCamas.showRow(row)
                else:
                    self.tableCamas.hideRow(row)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Camas()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
